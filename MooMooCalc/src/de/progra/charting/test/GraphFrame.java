/*
    JOpenChart Java Charting Library and Toolkit
    Copyright (C) 2001  Sebastian Müller
    http://jopenchart.sourceforge.net

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Lesser General Public
    License as published by the Free Software Foundation; either
    version 2.1 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public
    License along with this library; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

    GraphFrame.java
    Created on 31. Mai 2001, 23:58
 */

package de.progra.charting.test;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.filechooser.*;
import java.io.*;
import java.util.*;
import de.progra.charting.swing.*;
import de.progra.charting.event.*;
import de.progra.charting.model.*;
import de.progra.charting.render.*;
import de.progra.charting.*;
/**
 *
 * @author  mueller
 */
public class GraphFrame extends javax.swing.JFrame implements ActionListener, ChartDataModelListener {

    ChartPanel panel;
    EditableChartDataModel data;
	javax.swing.Timer t = new javax.swing.Timer(1000, this);
	double time = 3.0;
	
    /** Creates new form GraphFrame */
    public GraphFrame() {
        double[][] model = {{25.0, 22.0, 23.0},
                            {13.0, 11.0, 12.0}};
        
        double[] columns = {0.0, 1.0, 2.0};
        String[] columnString = {"1998", "1999", "2000"};
        String[] rows = {"Int. Temp.", "Ext. Temp."};

        String title = "Viewing Internal & External Temperature";

        data = new EditableChartDataModel(model, columns, rows);
        //ObjectChartDataModel odata = new ObjectChartDataModel(model, columnString, rows);
        panel = new ChartPanel(data, title, DefaultChart.LINEAR_X_LINEAR_Y);
        panel.addChartRenderer(new LineChartRenderer(panel.getCoordSystem(), data), 1);
        data.addChartDataModelListener(this);
        panel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent m) {
                if(SwingUtilities.isRightMouseButton(m)) {
                    jPopupMenu1.setLocation(m.getX(), m.getY());
                    jPopupMenu1.setVisible(true);
                } else
                    jPopupMenu1.setVisible(false);
                
            }
        });
        initComponents();
		t.start();
        setSize(640, 480);
        this.getContentPane().add(panel, BorderLayout.CENTER);
    }

	public void actionPerformed(ActionEvent evt) {
		data.insertValue(0, new Double(Math.random() * 10.0 + 20.0), new Double(time));
		data.insertValue(1, new Double(Math.random() * 7.0 + 10.0), new Double(time));
		
		time++;
	}
	
	public void chartDataChanged(ChartDataModelEvent evt) {
		//panel.invalidate();
		panel.revalidate();
		repaint();
	}

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        jMenuItem1.setText("Export Image file ...");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });

        jPopupMenu1.add(jMenuItem1);

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        pack();
    }//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // Add your handling code here:
        JFileChooser f = new JFileChooser(System.getProperty("user.home"));
        f.setFileFilter(new ImageFilter(ChartEncoder.getSupportedFormats()));
        int ret = f.showSaveDialog(this);
        
        if(ret != JFileChooser.APPROVE_OPTION)
            return;
        
        File selected = f.getSelectedFile();
        String filename = selected.getPath();
        String fileending = filename.substring(filename.lastIndexOf('.')+1);
        System.out.println("** filename = "+filename+" fileending = "+fileending);
        boolean equals = false;
        String[] supported = ChartEncoder.getSupportedFormats();
        
        for( int i = 0; i < supported.length; i++) {            
            if(fileending.equalsIgnoreCase(supported[i]))
                equals = true;
        }
        
        if( ! equals) {
            fileending = "png";        
            filename = filename.substring(0, filename.lastIndexOf('.')) + "." +fileending;
            System.out.println("** filename = "+filename+" fileending = "+fileending);
            selected = new File(filename);
        }
        
        try {
            ChartEncoder.createEncodedImage(new FileOutputStream(selected), panel, fileending);
        } catch(Exception e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Fehler beim Speichern", JOptionPane.ERROR_MESSAGE);
            System.out.println("** Error creating the nevilletest.png file, showing the Neville Interpolation.");
            e.printStackTrace();
            return;
        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        new GraphFrame().show();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JMenuItem jMenuItem1;
    // End of variables declaration//GEN-END:variables
   
}

class ImageFilter extends javax.swing.filechooser.FileFilter {

        protected Set supported = new HashSet();
        StringBuffer descr = new StringBuffer("Image Files");
        public ImageFilter(String[] accepted) {
            descr.append(" (");
            for(int i = 0; i < accepted.length; i++) {
                supported.add(accepted[i]);
                descr.append("*."+accepted[i]);
                
                if(i < accepted.length - 1)
                    descr.append(", ");
            }
            descr.append(" )");
        }
        
        // Accept all directories and all gif, jpg, or tiff files.
        public boolean accept(File f) {

            if (f.isDirectory()) {
                return true;
            }

            String s = f.getName();
            int i = s.lastIndexOf('.');

            if (i > 0 &&  i < s.length() - 1) {
                String extension = s.substring(i+1).toLowerCase();
                if (supported.contains(extension)) {
                        return true;
                } else {
                    return false;
                }
            }

            return false;
        }

        // The description of this filter
        public String getDescription() {
            return descr.toString();
        }
    }