package com.moomoo.moomoocalc;

import android.app.*;
import android.content.*;
import android.os.*;
import android.view.*;
import android.webkit.*;
import java.io.*;
import java.util.*;

import com.moomoo.calc.calc.Calculator;
import com.moomoo.calc.func.CalculatorFunction;
import com.moomoo.calc.parser.CalculatorToken;

/**
 * Displays our help text in a WebView.
 */
public class MathdroidHelp extends Activity {
  private String builtInFunctionList;
  private String builtInFunctionHelp;

  @Override public void onCreate(Bundle savedInstanceState) {
    super.onCreate(savedInstanceState);
    requestWindowFeature(Window.FEATURE_NO_TITLE);
    setContentView(R.layout.help);
    initAutoGeneratedHelp();

    // We can't use loadData because it doesn't work right on Gingerbread.
    //    getWebView().loadData(readAssetFile("help.html"), "text/html; charset=UTF-8", null);
    // http://stackoverflow.com/questions/12481481/web-page-not-available-on-gingerbread
    getWebView().loadDataWithBaseURL(null, readAssetFile("help.html"), "text/html", "UTF-8",null);
  }

  @Override public void onBackPressed() {
    WebView webView = getWebView();
    if (webView.canGoBack()) {
      webView.goBack();
    } else {
      super.onBackPressed();
    }
  }

  private WebView getWebView() {
    return ((WebView) findViewById(R.id.help_webview));
  }

  private String readAssetFile(String filename) {
    StringBuilder result = new StringBuilder();
    BufferedReader in = null;
    try {
      in = new BufferedReader(new InputStreamReader(getResources().getAssets().open(filename, Context.MODE_WORLD_READABLE)));
      String line;
      while ((line = in.readLine()) != null) {
        if (line.equals("$$BUILT_IN_FUNCTION_LIST$$")) {
          result.append(builtInFunctionList);
        } else if (line.equals("$$BUILT_IN_FUNCTION_HELP$$")) {
          result.append(builtInFunctionHelp);
        } else {
          result.append(line);
        }
      }
    } catch (IOException ex) {
      result.append("<p><font color='red'>" + ex.getMessage() + "</font></p>");
    } finally {
      if (in != null) {
        try {
          in.close();
        } catch (IOException ignored) {
        }
      }
    }
    return result.toString();
  }

  private void initAutoGeneratedHelp() {
    Calculator c = new Calculator();

    TreeMap<String, CalculatorFunction> nameToFunction = new TreeMap<String, CalculatorFunction>(String.CASE_INSENSITIVE_ORDER);
    for (String functionName : c.getFunctionNames()) {
      if (functionName.charAt(0) < 0x7f) { // Deliberately ignore Sigma and Pi.
        nameToFunction.put(functionName, c.getFunction(functionName));
      }
    }

    HashMap<CalculatorFunction, String> operators = new HashMap<CalculatorFunction, String>();
    for (CalculatorToken operator : c.getOperators()) {
      operators.put(c.getFunction(operator), operator.name);
    }

    StringBuilder list = new StringBuilder();
    list.append("<ul>\n");

    StringBuilder help = new StringBuilder();
    char lastChar = '\u0000';
    Map.Entry<String, CalculatorFunction> e;
    while ((e = nameToFunction.pollFirstEntry()) != null) {
      String name = e.getKey();
      CalculatorFunction function = e.getValue();

      // Add this function to the list, starting a new bullet each time
      // the initial character changes (so we group all the 'A's but 'B's get
      // their own line).
      if (Character.toLowerCase(name.charAt(0)) != lastChar) {
        list.append("\n<li>");
        lastChar = Character.toLowerCase(name.charAt(0));
      } else {
        list.append(", ");
      }
      list.append("<a href=\"#function_" + name + "\">");
      list.append(name);
      list.append("</a>");
      // If the function has a corresponding operator, give that in parentheses.
      String operatorName = operators.get(e.getValue());
      if (operatorName != null) {
        list.append(" (" + operatorName + ")");
      }

      // Add this function to the help.
      help.append("<a name=\"function_" + name + "\"><h4>");
      help.append(name);
      if (operatorName != null) {
        help.append(" (" + operatorName + ")");
      }
      help.append("</h4></a>\n");
      help.append("<p>Syntax: " + name + function.syntax() + "\n");
      help.append("<p>" + function.description() + "\n");
    }

    list.append("</ul>\n");

    builtInFunctionList = list.toString();
    builtInFunctionHelp = help.toString();
  }
}
